diff --git a/src/SFML/Window/Unix/DRM/drm-common.c b/src/SFML/Window/Unix/DRM/drm-common.c
index 3b04e74e..b660fdcf 100644
--- a/src/SFML/Window/Unix/DRM/drm-common.c
+++ b/src/SFML/Window/Unix/DRM/drm-common.c
@@ -130,10 +130,11 @@ static uint32_t find_crtc_for_encoder(const drmModeRes *resources,
 static uint32_t find_crtc_for_connector(const struct drm *drm, const drmModeRes *resources,
 		const drmModeConnector *connector) {
 	int i;
-
+	drmModeEncoder *encoder;
+	
 	for (i = 0; i < connector->count_encoders; i++) {
 		const uint32_t encoder_id = connector->encoders[i];
-		drmModeEncoder *encoder = drmModeGetEncoder(drm->fd, encoder_id);
+		encoder = drmModeGetEncoder(drm->fd, encoder_id);
 
 		if (encoder) {
 			const uint32_t crtc_id = find_crtc_for_encoder(resources, encoder);
@@ -145,6 +146,28 @@ static uint32_t find_crtc_for_connector(const struct drm *drm, const drmModeRes
 		}
 	}
 
+    // batocera - set resolution
+    {
+      FILE* fdDrmMode;
+      int drmMode;
+      if((fdDrmMode = fopen("/var/run/drmMode", "r")) != NULL) {
+		if(fscanf(fdDrmMode, "%i", &drmMode) == 1) {
+		  if(drmMode>=0 && drmMode<connector->count_modes) {
+			drmModeCrtc *pcrtc = drmModeGetCrtc(drm->fd, encoder->crtc_id);
+			if(pcrtc != NULL) {
+			  drmModeSetCrtc(drm->fd, pcrtc->crtc_id, pcrtc->buffer_id, 0, 0, &connector->connector_id, 1, &connector->modes[drmMode]);
+				if(pcrtc->crtc_id != 0) {
+					fclose(fdDrmMode);
+					return pcrtc->crtc_id;	
+				}
+			}
+		  }
+		}
+		fclose(fdDrmMode);
+      }
+    }
+    //
+
 	/* no match found */
 	return -1;
 }
